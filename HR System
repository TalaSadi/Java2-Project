import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

public class update extends Application {

    private GridPane employeeGrid = new GridPane();
    private int nextRow = 1;
    private Map<String, ObservableList<String>> employeeReviews = new HashMap<>();
    private boolean isHR = true;
    private Map<Integer, Employee> employeeMap = new HashMap<>();

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Employee Management System");

        // ===== Login Scene =====
        Label lblTitle = new Label("HR Login");
        lblTitle.setStyle("-fx-font-size: 24; -fx-font-weight: bold; -fx-text-fill: #333;");

        TextField txtUsername = new TextField();
        txtUsername.setPromptText("Enter your email...");
        txtUsername.setStyle("-fx-background-radius: 15; -fx-padding: 8 12;");

        PasswordField txtPassword = new PasswordField();
        txtPassword.setPromptText("Enter password");
        txtPassword.setStyle("-fx-background-radius: 15; -fx-padding: 8 12;");

        Button btnLogin = new Button("Login");
        btnLogin.setStyle(
                "-fx-background-color: #2196F3; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 15; -fx-padding: 8 12;"
        );

        VBox loginBox = new VBox(15, lblTitle, txtUsername, txtPassword, btnLogin);
        loginBox.setAlignment(Pos.CENTER);
        loginBox.setPadding(new Insets(30));
        loginBox.setStyle("-fx-background-color: #eef; -fx-background-radius: 20;");
        loginBox.setEffect(new DropShadow(10, Color.GRAY));

        StackPane loginLayout = new StackPane(loginBox);
        loginLayout.setStyle("-fx-background-color: linear-gradient(to bottom, #e0f7fa, #ffffff);");
        Scene loginScene = new Scene(loginLayout, 400, 300);

        // ===== Login Action =====
        btnLogin.setOnAction(e -> {
            String username = txtUsername.getText();
            String password = txtPassword.getText();

            if (!username.contains("@")) {
                showAlert("Login Error", "Username must contain @");
            } else if (!password.equals("1234")) {
                showAlert("Login Error", "Incorrect password");
            } else {
                txtUsername.clear();
                txtPassword.clear();
                showEmployeeManagement(primaryStage, loginScene);
            }
        });

        primaryStage.setScene(loginScene);
        primaryStage.show();
    }

    private void showEmployeeManagement(Stage stage, Scene loginScene) {
        stage.setTitle("Employee Management System");

        // ===== Sidebar =====
        Button requestsBtn = new Button("Requests");
        Button manageBtn = new Button("Manage");
        Button employeesDash = new Button("Dashboard");
        
         manageBtn.setMaxWidth(Double.MAX_VALUE);
        employeesDash.setMaxWidth(Double.MAX_VALUE);
        requestsBtn.setMaxWidth(Double.MAX_VALUE);//7D4DD1 

        requestsBtn.setStyle(
                "-fx-background-color: #4DA1D1; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 10;"
        );
        employeesDash.setStyle(
                "-fx-background-color: #4D5ED1; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 10;"
        );        
        manageBtn.setStyle(
                "-fx-background-color: #7D4DD1; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 10;"
        );
        Button logoutBtn = new Button("Logout");
        logoutBtn.setMaxWidth(Double.MAX_VALUE);
        logoutBtn.setStyle(
                "-fx-background-color: #f44336; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 10;"
        );

        VBox sidebar = new VBox(20, requestsBtn, employeesDash,manageBtn ,logoutBtn);
        sidebar.setPadding(new Insets(20));
        sidebar.setStyle(
                "-fx-background-color: #e0f7fa; -fx-border-radius: 10; -fx-background-radius: 10;"
        );
        sidebar.setPrefWidth(150);
        sidebar.setAlignment(Pos.TOP_CENTER);

        // ===== Main Layout =====
        BorderPane mainLayout = new BorderPane();
        mainLayout.setLeft(sidebar);

        VBox centerContent = new VBox(); // placeholder for dynamic content
        mainLayout.setCenter(centerContent);

        Scene scene = new Scene(mainLayout, 1000, 600);
        stage.setScene(scene);
        stage.setHeight(1400);
        stage.setWidth(1400);

        // ===== Button Actions =====
        employeesDash.setOnAction(e -> showDashboard(centerContent));
        
        manageBtn.setOnAction(e->{ showEmployeeManagement(stage, loginScene);
            
    });
        
        
        
        requestsBtn.setOnAction(e -> showRequests(centerContent));
        logoutBtn.setOnAction(e -> {
            Alert a = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to log out? ", ButtonType.YES, ButtonType.NO);
            Optional<ButtonType> res = a.showAndWait();
            if (res.get().equals(ButtonType.YES)) {
                stage.setHeight(300);
                stage.setWidth(400);
             stage.setScene(loginScene);
             
            }
               
        });

        // Show HR Management by default
        centerContent.getChildren().clear();
        centerContent.getChildren().add(buildHRManagement());
    }

    private VBox buildHRManagement() {
        // ===== Input Fields =====
        TextField inputName = new TextField();
        inputName.setPromptText("Employee Name");
        TextField inputContactInfo = new TextField();
        inputContactInfo.setPromptText("Contact Info");
        TextField inputTeam = new TextField();
        inputTeam.setPromptText("Team");
        TextField inputContract = new TextField();
        inputContract.setPromptText("Contract");
        TextField inputStatus = new TextField();
        inputStatus.setPromptText("Status");

        Button submitBtn = new Button("➕ Add Employee");
        submitBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-weight: bold;");

        employeeGrid.setPadding(new Insets(15));
        employeeGrid.setHgap(15);
        employeeGrid.setVgap(10);
        employeeGrid.setStyle("-fx-background-color: #f9f9f9; -fx-border-color: #ddd; -fx-border-radius: 8; -fx-background-radius: 8;");

        String headerStyle = "-fx-font-weight: bold; -fx-font-size: 14; -fx-text-fill: #333;";
        employeeGrid.add(makeLabel("Name", headerStyle), 0, 0);
        employeeGrid.add(makeLabel("Contact", headerStyle), 1, 0);
        employeeGrid.add(makeLabel("Team", headerStyle), 2, 0);
        employeeGrid.add(makeLabel("Contract", headerStyle), 3, 0);
        employeeGrid.add(makeLabel("Status", headerStyle), 4, 0);
        employeeGrid.add(makeLabel("Actions", headerStyle), 5, 0);

        submitBtn.setOnAction(e -> {
            String name = inputName.getText();
            String contact = inputContactInfo.getText();
            String team = inputTeam.getText();
            String contract = inputContract.getText();
            String status = inputStatus.getText();

            if (name.isEmpty()) {
                showAlert("Error", "Name cannot be empty");
                return;
            }

            Employee emp = new Employee(name, contact, team, contract, status);
            employeeMap.put(nextRow, emp);

            employeeGrid.add(makeLabel(name, ""), 0, nextRow);
            employeeGrid.add(makeLabel(contact, ""), 1, nextRow);
            employeeGrid.add(makeLabel(team, ""), 2, nextRow);
            employeeGrid.add(makeLabel(contract, ""), 3, nextRow);
            employeeGrid.add(makeLabel(status, ""), 4, nextRow);

            Button updateBtn = new Button("✏️ Update");
            updateBtn.setStyle("-fx-background-color: #2196F3; -fx-text-fill: white;");
            Button removeBtn = new Button("🗑 Remove");
            removeBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");
            Button reviewBtn = new Button("⭐ Reviews");
            reviewBtn.setStyle("-fx-background-color: #FF9800; -fx-text-fill: white;");

            HBox actions = new HBox(8, updateBtn, removeBtn, reviewBtn);
            actions.setPadding(new Insets(5, 0, 5, 0));
            employeeGrid.add(actions, 5, nextRow);

            int currentRow = nextRow;

            removeBtn.setOnAction(ev -> {
                employeeGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) == currentRow);
                employeeMap.remove(currentRow);
                employeeReviews.remove(emp.name);
            });

            updateBtn.setOnAction(ev -> showUpdateDialog(emp, currentRow));
            reviewBtn.setOnAction(ev -> showReviewForm(emp.name, isHR));

            employeeReviews.put(emp.name, generateRandomReviews());

            nextRow++;

            inputName.clear();
            inputContactInfo.clear();
            inputTeam.clear();
            inputContract.clear();
            inputStatus.clear();
        });

        HBox inputSection = new HBox(12, inputName, inputContactInfo, inputTeam, inputContract, inputStatus, submitBtn);
        inputSection.setPadding(new Insets(10));
        inputSection.setStyle("-fx-background-color: #eef; -fx-background-radius: 8;");

        VBox mainLayout = new VBox(15, inputSection, employeeGrid);
        mainLayout.setPadding(new Insets(20));

        return mainLayout;
    }

    // ===== Dashboard =====
    private void showDashboard(VBox center) {
        center.getChildren().clear();

        Label lblTitle = new Label("IT Team Dashboard");
        lblTitle.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

        String[][] employees = {
                {"Bob Wilson", "UI/UX Designer", "Absent", "9:30 AM", "-", "-", "-", "Friend's wedding celebration"},
                {"Ahmad Abu Degga", "UI/UX Designer", "Present", "9:30 AM", "9:30 AM", "9:30 AM", "-", ""},
                {"Omar Al Sa'di", "Backend Developer", "Present", "9:30 AM", "9:30 AM", "9:30 AM", "-", ""},
                {"Dania Al Abadi", "Quality Assurance", "Present", "9:30 AM", "9:30 AM", "9:30 AM", "-", ""}
        };

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20));
        grid.setHgap(20);
        grid.setVgap(20);

        int col = 0, row = 0;

        for (String[] emp : employees) {
            VBox card = new VBox(8);
            card.setPadding(new Insets(15));
            card.setStyle("-fx-background-color: #ffffff; -fx-background-radius: 10; -fx-border-radius: 10; -fx-border-color: #ddd;");
            card.setPrefWidth(300);

            Label nameLbl = new Label(emp[0]);
            nameLbl.setStyle("-fx-font-weight: bold; -fx-font-size: 16;");
            Label roleLbl = new Label(emp[1]);
            roleLbl.setStyle("-fx-font-size: 12; -fx-text-fill: gray;");
            Label statusLbl = new Label(emp[2]);
            statusLbl.setStyle(emp[2].equals("Present") ? "-fx-text-fill: green;" : "-fx-text-fill: red; -fx-font-weight: bold;");

            VBox header = new VBox(2, nameLbl, roleLbl);
            HBox headerBox = new HBox();
            headerBox.setAlignment(Pos.CENTER_LEFT);
            HBox.setHgrow(header, Priority.ALWAYS);
            headerBox.getChildren().addAll(header, statusLbl);
            headerBox.setSpacing(10);

            card.getChildren().add(headerBox);

            if (!emp[2].equals("Present") && !emp[7].isEmpty()) {
                Label reasonLbl = new Label(emp[7]);
                reasonLbl.setWrapText(true);
                card.getChildren().add(reasonLbl);
            } else {
                GridPane timesGrid = new GridPane();
                timesGrid.setHgap(10);
                timesGrid.setVgap(5);

                String[] timeLabels = {"In Time", "Break taken for", "Work Time", "Out Time"};
                for (int i = 0; i < 4; i++) {
                    timesGrid.add(new Label(timeLabels[i] + ":"), 0, i);
                    timesGrid.add(new Label(emp[i + 3]), 1, i);
                }
                card.getChildren().add(timesGrid);
            }

            grid.add(card, col, row);
            col++;
            if (col > 1) {
                col = 0;
                row++;
            }
        }

        ScrollPane scroll = new ScrollPane(grid);
        scroll.setFitToWidth(true);
        scroll.setStyle("-fx-background-color: transparent;");

        VBox layout = new VBox(15, lblTitle, scroll);
        layout.setPadding(new Insets(20));
        center.getChildren().add(layout);
    }

    // ===== Requests =====
    private void showRequests(VBox center) {
        center.getChildren().clear();

        Label lblTitle = new Label("Leave Requests");
        lblTitle.setStyle("-fx-font-size: 20px; -fx-font-weight: bold; -fx-text-fill: #333;");

        String[] headerTexts = {"Employee ID", "Employee Name", "Employee Email", "Employee Department",
                "Leave Purpose", "Leave Duration", "Num of Leaves Taken", "Leaves Left", "Actions"};

        GridPane gp = new GridPane();
        gp.setPadding(new Insets(20));
        gp.setHgap(15);
        gp.setVgap(10);
        gp.setStyle("-fx-background-color: #f4f4f4; -fx-border-radius: 10; -fx-background-radius: 10;");

        for (int i = 0; i < headerTexts.length; i++) {
            Label header = new Label(headerTexts[i]);
            header.setStyle("-fx-font-weight: bold; -fx-background-color: #2196F3; -fx-text-fill: white; -fx-padding: 5;");
            gp.add(header, i, 0);
        }

        String[][] data = {
                {"202110", "Bob Wilson", "bob@email.com", "UI/UX Designer", "Vacation", "5 days", "10", "5"},
                {"202143", "Ahmad Abu Degga", "ahmad@email.com", "UI/UX Designer", "Medical", "3 days", "8", "5"},
                {"201953", "Omar Al Sa'di", "omar@email.com", "Backend Developer", "Personal", "2 days", "12", "10"},
                {"201877", "Dania Al Abadi", "dania@email.com", "Quality Assurance", "Vacation", "7 days", "15", "8"}
        };

        for (int row = 0; row < data.length; row++) {
            Label[] rowLabels = new Label[headerTexts.length];
            for (int col = 0; col < data[row].length; col++) {
                Label lbl = new Label(data[row][col]);
                lbl.setStyle("-fx-padding: 5;");
                gp.add(lbl, col, row + 1);
                rowLabels[col] = lbl;
            }

            Button acceptBtn = new Button("✅ Accept");
            acceptBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
            Button rejectBtn = new Button("❌ Reject");
            rejectBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");

            HBox actionBox = new HBox(8, acceptBtn, rejectBtn);
            gp.add(actionBox, data[row].length, row + 1);

            int finalRow = row;
            acceptBtn.setOnAction(ev -> {
                int taken = Integer.parseInt(rowLabels[6].getText()) + 1;
                rowLabels[6].setText(String.valueOf(taken));
                int left = Integer.parseInt(rowLabels[7].getText()) - 1;
                rowLabels[7].setText(String.valueOf(left));
                Label acceptedLbl = new Label("Accepted");
                acceptedLbl.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                actionBox.getChildren().setAll(acceptedLbl);
            });

            rejectBtn.setOnAction(ev -> {
                Label rejectedLbl = new Label("Rejected");
                rejectedLbl.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                actionBox.getChildren().setAll(rejectedLbl);
            });
        }

        VBox layout = new VBox(15, lblTitle, gp);
        layout.setPadding(new Insets(20));
        center.getChildren().add(layout);
    }

    // ===== Employee Update & Review =====
    private void showReviewForm(String employeeName, boolean isHR) {
        Stage reviewStage = new Stage();
        reviewStage.setTitle("Reviews for " + employeeName);

        VBox layout = new VBox(12);
        layout.setPadding(new Insets(20));
        layout.setStyle("-fx-background-color: #f4f4f4;");

        Label title = new Label("⭐ Reviews for " + employeeName);
        title.setStyle("-fx-font-size: 16; -fx-font-weight: bold; -fx-text-fill: #222;");

        ObservableList<String> reviews = employeeReviews.getOrDefault(employeeName, FXCollections.observableArrayList());
        ListView<String> reviewList = new ListView<>(reviews);
        reviewList.setPrefHeight(200);

        layout.getChildren().addAll(title, reviewList);

        Scene scene = new Scene(layout, 450, 350);
        reviewStage.setScene(scene);
        reviewStage.show();
    }

    private void showUpdateDialog(Employee emp, int row) {
        Stage updateStage = new Stage();
        updateStage.setTitle("Update Employee - " + emp.name);

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20));
        grid.setHgap(10);
        grid.setVgap(10);

        TextField nameField = new TextField(emp.name);
        TextField contactField = new TextField(emp.contact);
        TextField teamField = new TextField(emp.team);
        TextField contractField = new TextField(emp.contract);
        TextField statusField = new TextField(emp.status);

        grid.add(new Label("Name:"), 0, 0);
        grid.add(nameField, 1, 0);
        grid.add(new Label("Contact:"), 0, 1);
        grid.add(contactField, 1, 1);
        grid.add(new Label("Team:"), 0, 2);
        grid.add(teamField, 1, 2);
        grid.add(new Label("Contract:"), 0, 3);
        grid.add(contractField, 1, 3);
        grid.add(new Label("Status:"), 0, 4);
        grid.add(statusField, 1, 4);

        Button saveBtn = new Button("💾 Save");
        saveBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
        grid.add(saveBtn, 0, 5, 2, 1);

        saveBtn.setOnAction(ev -> {
            emp.name = nameField.getText();
            emp.contact = contactField.getText();
            emp.team = teamField.getText();
            emp.contract = contractField.getText();
            emp.status = statusField.getText();
            refreshRow(emp, row);
            updateStage.close();
        });

        Scene scene = new Scene(grid, 400, 300);
        updateStage.setScene(scene);
        updateStage.show();
    }

    private void refreshRow(Employee emp, int row) {
        employeeGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) == row);
        employeeGrid.add(makeLabel(emp.name, ""), 0, row);
        employeeGrid.add(makeLabel(emp.contact, ""), 1, row);
        employeeGrid.add(makeLabel(emp.team, ""), 2, row);
        employeeGrid.add(makeLabel(emp.contract, ""), 3, row);
        employeeGrid.add(makeLabel(emp.status, ""), 4, row);

        Button updateBtn = new Button("✏️ Update");
        updateBtn.setStyle("-fx-background-color: #2196F3; -fx-text-fill: white;");
        Button removeBtn = new Button("🗑 Remove");
        removeBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");
        Button reviewBtn = new Button("⭐ Reviews");
        reviewBtn.setStyle("-fx-background-color: #FF9800; -fx-text-fill: white;");

        HBox actions = new HBox(8, updateBtn, removeBtn, reviewBtn);
        actions.setPadding(new Insets(5, 0, 5, 0));
        employeeGrid.add(actions, 5, row);

        int currentRow = row;
        removeBtn.setOnAction(ev -> {
            employeeGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) == currentRow);
            employeeMap.remove(currentRow);
            employeeReviews.remove(emp.name);
        });

        updateBtn.setOnAction(ev -> showUpdateDialog(emp, row));
        reviewBtn.setOnAction(ev -> showReviewForm(emp.name, isHR));
    }

    private ObservableList<String> generateRandomReviews() {
        String[] sampleReviews = {
                "Very dedicated and hardworking.",
                "Needs improvement in communication.",
                "Great teamwork and leadership skills.",
                "Exceeded project expectations.",
                "Reliable and punctual.",
                "Struggles with deadlines sometimes."
        };

        Random rand = new Random();
        ObservableList<String> reviews = FXCollections.observableArrayList();
        for (int i = 0; i < 2 + rand.nextInt(2); i++) {
            reviews.add(sampleReviews[rand.nextInt(sampleReviews.length)]);
        }
        return reviews;
    }

    private Label makeLabel(String text, String style) {
        Label lbl = new Label(text);
        lbl.setStyle(style + "; -fx-font-size: 13;");
        return lbl;
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private static class Employee {
        String name, contact, team, contract, status;
        Employee(String name, String contact, String team, String contract, String status) {
            this.name = name;
            this.contact = contact;
            this.team = team;
            this.contract = contract;
            this.status = status;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}
