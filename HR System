
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.sql.*;
import java.util.Optional;

public class Temp extends Application {

    // ===== DB config =====
    private static final String DB_URL  = "jdbc:mysql://localhost:3306/databasejavaproject2";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "";

    // ===== UI state =====
    private Stage primary;
    private Scene loginScene;
    private Scene appScene;
    private BorderPane appRoot;
    private VBox centerContent;         // central content area reused across pages
    private GridPane employeeGrid;      // grid used on Management page

    @Override
    public void start(Stage stage) {
        this.primary = stage;
        this.loginScene = buildLoginScene();
        stage.setScene(loginScene);
        stage.setTitle("Employee Management System");
        stage.show();
    }

    // ===== Login =====
    private Scene buildLoginScene() {
        Label lblTitle = new Label("HR Login");
        lblTitle.setFont(Font.font(22));

        TextField txtUsername = new TextField();
        txtUsername.setPromptText("Email (must contain @)");

        PasswordField txtPassword = new PasswordField();
        txtPassword.setPromptText("Password (try: 1234)");

        Button btnLogin = new Button("Login");
        btnLogin.setDefaultButton(true);
        btnLogin.setStyle("-fx-background-color: #2196F3; -fx-text-fill: white;");

        VBox card = new VBox(12, lblTitle, txtUsername, txtPassword, btnLogin);
        card.setAlignment(Pos.CENTER);
        card.setPadding(new Insets(24));
        card.setStyle("-fx-background-color: #eef; -fx-background-radius: 12;");

        StackPane root = new StackPane(card);
        root.setPadding(new Insets(24));

        btnLogin.setOnAction(e -> {
            String u = txtUsername.getText();
            String p = txtPassword.getText();
            if (u == null || !u.contains("@")) {
                alert(Alert.AlertType.ERROR, "Login Error", "Username must contain @");
                return;
            }
            if (!"1234".equals(p)) {
                alert(Alert.AlertType.ERROR, "Login Error", "Incorrect password");
                return;
            }
            txtUsername.clear();
            txtPassword.clear();
            // go to app shell
            if (appScene == null) appScene = buildAppScene();
            primary.setScene(appScene);
        });

        return new Scene(root, 420, 300);
    }

    // ===== App shell with persistent sidebar =====
    private Scene buildAppScene() {
        appRoot = new BorderPane();

        // Sidebar
        VBox sidebar = new VBox(12);
        sidebar.setPadding(new Insets(16));
        sidebar.setStyle("-fx-background-color: #2c3e50;");
        sidebar.setPrefWidth(170);

        Button btnDashboard = new Button("Dashboard");
        Button btnManage    = new Button("Management");
        Button btnRequests  = new Button("Requests");
        Button btnLogout    = new Button("Logout");

        styleSidebarBtn(btnDashboard);
        styleSidebarBtn(btnManage);
        styleSidebarBtn(btnRequests);
        styleSidebarBtn(btnLogout);

        btnDashboard.setOnAction(e -> showDashboard());
        btnManage.setOnAction(e -> showManagement());
        btnRequests.setOnAction(e -> showRequests());
        btnLogout.setOnAction(e -> primary.setScene(loginScene));

        sidebar.getChildren().addAll(btnDashboard, btnManage, btnRequests, new Separator(), btnLogout);

        // Center container (swapped by page methods)
        centerContent = new VBox();
        centerContent.setPadding(new Insets(16));

        appRoot.setLeft(sidebar);
        appRoot.setCenter(centerContent);

        // Default page
        showDashboard();

        return new Scene(appRoot, 1200, 750);
    }

    private void styleSidebarBtn(Button b) {
        b.setMaxWidth(Double.MAX_VALUE);
        b.setStyle("-fx-background-color: #34495e; -fx-text-fill: white; -fx-font-size: 14px;");
    }

    // ===== Page: Dashboard (read-only cards) =====
    private void showDashboard() {
        centerContent.getChildren().clear();

        Label lblTitle = new Label("IT Team Dashboard");
        lblTitle.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");

        // Sample dashboard cards (read-only)
        String[][] employees = {
                {"Bob Wilson", "UI/UX Designer", "Absent", "9:30 AM", "-", "-", "-", "Friend's wedding celebration"},
                {"Ahmad Abu Degga", "UI/UX Designer", "Present", "9:30 AM", "1 h", "7 h", "6:00 PM", ""},
                {"Omar Al Sa'di", "Backend Developer", "Present", "9:20 AM", "45 m", "7 h", "5:50 PM", ""},
                {"Dania Al Abadi", "Quality Assurance", "Present", "9:10 AM", "1 h", "7 h", "6:10 PM", ""}
        };

        GridPane grid = new GridPane();
        grid.setHgap(18);
        grid.setVgap(18);
        grid.setPadding(new Insets(14));

        int col = 0, row = 0;
        for (String[] emp : employees) {
            VBox card = new VBox(8);
            card.setPadding(new Insets(14));
            card.setStyle("-fx-background-color: white; -fx-background-radius: 10; -fx-border-color: #ddd; -fx-border-radius: 10;");
            card.setPrefWidth(320);

            Label nameLbl = new Label(emp[0]);
            nameLbl.setStyle("-fx-font-weight: bold; -fx-font-size: 16;");
            Label roleLbl = new Label(emp[1]);
            roleLbl.setStyle("-fx-text-fill: gray;");

            Label statusLbl = new Label(emp[2]);
            statusLbl.setStyle(emp[2].equals("Present") ? "-fx-text-fill: green;" : "-fx-text-fill: red; -fx-font-weight: bold;");

            HBox header = new HBox(10, new VBox(2, nameLbl, roleLbl), statusLbl);
            HBox.setHgrow(header.getChildren().get(0), Priority.ALWAYS);

            card.getChildren().add(header);

            if (!emp[2].equals("Present") && !emp[7].isEmpty()) {
                Label reason = new Label(emp[7]);
                reason.setWrapText(true);
                card.getChildren().add(reason);
            } else {
                GridPane times = new GridPane();
                times.setHgap(10);
                times.setVgap(4);
                String[] timeLabels = {"In Time", "Break taken", "Work Time", "Out Time"};
                for (int i = 0; i < 4; i++) {
                    times.add(new Label(timeLabels[i] + ":"), 0, i);
                    times.add(new Label(emp[i + 3]), 1, i);
                }
                card.getChildren().add(times);
            }

            grid.add(card, col, row);
            col++;
            if (col > 2) { col = 0; row++; }
        }

        centerContent.getChildren().addAll(lblTitle, grid);
    }

    // ===== Page: Management (CRUD) =====
    private void showManagement() {
        centerContent.getChildren().clear();

        Label title = new Label("Employee Management");
        title.setStyle("-fx-font-size: 22px; -fx-font-weight: bold;");

        // Add-form
        TextField tfName = new TextField();    tfName.setPromptText("Name");
        TextField tfCont = new TextField();    tfCont.setPromptText("Contact");
        TextField tfTeam = new TextField();    tfTeam.setPromptText("Team");
        TextField tfStat = new TextField();    tfStat.setPromptText("Status");

        Button addBtn = new Button("➕ Add");
        addBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");

        HBox addBox = new HBox(8, tfName, tfCont, tfTeam, tfStat, addBtn);
        addBox.setAlignment(Pos.CENTER_LEFT);
        addBox.setPadding(new Insets(10));

        employeeGrid = new GridPane();
        employeeGrid.setHgap(12);
        employeeGrid.setVgap(8);
        employeeGrid.setPadding(new Insets(10));
        employeeGrid.setStyle("-fx-background-color: #f9f9f9; -fx-border-radius: 6; -fx-background-radius: 6;");

        // Header row
        String[] headers = {"ID", "Name", "Contact", "Team", "Status", "Actions"};
        for (int i = 0; i < headers.length; i++) {
            Label h = new Label(headers[i]);
            h.setStyle("-fx-font-weight: bold; -fx-background-color: #2196F3; -fx-text-fill: white; -fx-padding: 6;");
            employeeGrid.add(h, i, 0);
        }

        // Load rows
        loadEmployeesIntoGrid();

        // Add new employee
        addBtn.setOnAction(e -> {
            String name = tfName.getText().trim();
            String contact = tfCont.getText().trim();
            String team = tfTeam.getText().trim();
            String status = tfStat.getText().trim();

            if (name.isEmpty()) {
                alert(Alert.AlertType.WARNING, "Validation", "Name is required.");
                return;
            }

            String sql = "INSERT INTO employees2 (name, contact, team, status) VALUES (?, ?, ?, ?)";
            try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
                 PreparedStatement pst = con.prepareStatement(sql)) {
                pst.setString(1, name);
                pst.setString(2, contact);
                pst.setString(3, team);
                pst.setString(4, status);
                int rows = pst.executeUpdate();
                if (rows > 0) {
                    alert(Alert.AlertType.INFORMATION, "Success", "Employee added.");
                    tfName.clear(); tfCont.clear(); tfTeam.clear(); tfStat.clear();
                    loadEmployeesIntoGrid();
                } else {
                    alert(Alert.AlertType.ERROR, "Error", "Insert failed.");
                }
            } catch (Exception ex) {
                alert(Alert.AlertType.ERROR, "Error", ex.getMessage());
            }
        });

        VBox page = new VBox(12, title, addBox, employeeGrid);
        page.setPadding(new Insets(12));
        centerContent.getChildren().add(page);
    }

    private void loadEmployeesIntoGrid() {
        // clear old rows except header
        employeeGrid.getChildren().removeIf(node -> {
            Integer r = GridPane.getRowIndex(node);
            return r != null && r > 0;
        });

        String sql = "SELECT id, name, contact, team, status FROM employees2 ORDER BY id";
        int row = 1;

        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             Statement st = con.createStatement();
             ResultSet rs = st.executeQuery(sql)) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String contact = rs.getString("contact");
                String team = rs.getString("team");
                String status = rs.getString("status");

                employeeGrid.add(new Label(String.valueOf(id)), 0, row);
                employeeGrid.add(new Label(name), 1, row);
                employeeGrid.add(new Label(contact == null ? "" : contact), 2, row);
                employeeGrid.add(new Label(team == null ? "" : team), 3, row);
                employeeGrid.add(new Label(status == null ? "" : status), 4, row);

                Button btnUpd = new Button("✏ Update");
                btnUpd.setStyle("-fx-background-color: #FFC107; -fx-text-fill: white;");
                btnUpd.setOnAction(ev -> openUpdateDialog(id));

                Button btnDel = new Button("🗑 Remove");
                btnDel.setStyle("-fx-background-color: #e74c3c; -fx-text-fill: white;");
                btnDel.setOnAction(ev -> deleteEmployee(id, name));

                HBox actions = new HBox(8, btnUpd, btnDel);
                employeeGrid.add(actions, 5, row);

                row++;
            }

        } catch (Exception ex) {
            alert(Alert.AlertType.ERROR, "Error", ex.getMessage());
        }
    }

    private void openUpdateDialog(int empId) {
        Dialog<ButtonType> dialog = new Dialog<>();
        dialog.setTitle("Update Employee (ID: " + empId + ")");
        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

        GridPane grid = new GridPane();
        grid.setHgap(10); grid.setVgap(10);
        grid.setPadding(new Insets(12));

        TextField tfName = new TextField();
        TextField tfCont = new TextField();
        TextField tfTeam = new TextField();
        TextField tfStat = new TextField();

        // Load current values
        try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement pst = con.prepareStatement("SELECT name, contact, team, status FROM employees2 WHERE id=?")) {
            pst.setInt(1, empId);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    tfName.setText(rs.getString("name"));
                    tfCont.setText(rs.getString("contact"));
                    tfTeam.setText(rs.getString("team"));
                    tfStat.setText(rs.getString("status"));
                } else {
                    alert(Alert.AlertType.ERROR, "Error", "Employee not found.");
                    return;
                }
            }
        } catch (Exception ex) {
            alert(Alert.AlertType.ERROR, "Error", ex.getMessage());
            return;
        }

        grid.addRow(0, new Label("Name:"),   tfName);
        grid.addRow(1, new Label("Contact:"),tfCont);
        grid.addRow(2, new Label("Team:"),   tfTeam);
        grid.addRow(3, new Label("Status:"), tfStat);

        dialog.getDialogPane().setContent(grid);

        Optional<ButtonType> res = dialog.showAndWait();
        if (res.isPresent() && res.get() == ButtonType.OK) {
            String name = tfName.getText().trim();
            if (name.isEmpty()) {
                alert(Alert.AlertType.WARNING, "Validation", "Name is required.");
                return;
            }
            String contact = tfCont.getText().trim();
            String team    = tfTeam.getText().trim();
            String status  = tfStat.getText().trim();

            String sql = "UPDATE employees2 SET name=?, contact=?, team=?, status=? WHERE id=?";
            try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
                 PreparedStatement pst = con.prepareStatement(sql)) {
                pst.setString(1, name);
                pst.setString(2, contact);
                pst.setString(3, team);
                pst.setString(4, status);
                pst.setInt(5, empId);
                int updated = pst.executeUpdate();
                if (updated > 0) {
                    alert(Alert.AlertType.INFORMATION, "Success", "Employee updated.");
                    loadEmployeesIntoGrid();
                } else {
                    alert(Alert.AlertType.WARNING, "Warning", "No rows updated.");
                }
            } catch (Exception ex) {
                alert(Alert.AlertType.ERROR, "Error", ex.getMessage());
            }
        }
    }

    private void deleteEmployee(int empId, String name) {
        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION,
                "Remove employee \"" + name + "\" (ID " + empId + ")?",
                ButtonType.YES, ButtonType.NO);
        Optional<ButtonType> r = confirm.showAndWait();
        if (r.isPresent() && r.get() == ButtonType.YES) {
            String sql = "DELETE FROM employees2 WHERE id=?";
            try (Connection con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
                 PreparedStatement pst = con.prepareStatement(sql)) {
                pst.setInt(1, empId);
                int del = pst.executeUpdate();
                if (del > 0) {
                    alert(Alert.AlertType.INFORMATION, "Success", "Employee removed.");
                    loadEmployeesIntoGrid();
                } else {
                    alert(Alert.AlertType.WARNING, "Warning", "Nothing deleted.");
                }
            } catch (Exception ex) {
                alert(Alert.AlertType.ERROR, "Error", ex.getMessage());
            }
        }
    }

    // ===== Page: Requests (sample) =====
    private void showRequests() {
        centerContent.getChildren().clear();

        Label lblTitle = new Label("Leave Requests");
        lblTitle.setStyle("-fx-font-size: 20px; -fx-font-weight: bold; -fx-text-fill: #333;");

        String[] headerTexts = {"Employee ID", "Employee Name", "Employee Email", "Employee Department",
                "Leave Purpose", "Leave Duration", "Num of Leaves Taken", "Leaves Left", "Actions"};

        GridPane gp = new GridPane();
        gp.setPadding(new Insets(20));
        gp.setHgap(15);
        gp.setVgap(10);
        gp.setStyle("-fx-background-color: #f4f4f4; -fx-border-radius: 10; -fx-background-radius: 10;");

        for (int i = 0; i < headerTexts.length; i++) {
            Label header = new Label(headerTexts[i]);
            header.setStyle("-fx-font-weight: bold; -fx-background-color: #2196F3; -fx-text-fill: white; -fx-padding: 5;");
            gp.add(header, i, 0);
        }

        String[][] data = {
                {"202110", "Bob Wilson", "bob@email.com", "UI/UX Designer", "Vacation", "5 days", "10", "5"},
                {"202143", "Ahmad Abu Degga", "ahmad@email.com", "UI/UX Designer", "Medical", "3 days", "8", "5"},
                {"201953", "Omar Al Sa'di", "omar@email.com", "Backend Developer", "Personal", "2 days", "12", "10"},
                {"201877", "Dania Al Abadi", "dania@email.com", "Quality Assurance", "Vacation", "7 days", "15", "8"}
        };

        for (int row = 0; row < data.length; row++) {
            Label[] rowLabels = new Label[headerTexts.length];
            for (int col = 0; col < data[row].length; col++) {
                Label lbl = new Label(data[row][col]);
                lbl.setStyle("-fx-padding: 5;");
                gp.add(lbl, col, row + 1);
                rowLabels[col] = lbl;
            }

            Button acceptBtn = new Button("✅ Accept");
            acceptBtn.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
            Button rejectBtn = new Button("❌ Reject");
            rejectBtn.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");

            HBox actionBox = new HBox(8, acceptBtn, rejectBtn);
            gp.add(actionBox, data[row].length, row + 1);

            acceptBtn.setOnAction(ev -> {
                int taken = Integer.parseInt(rowLabels[6].getText()) + 1;
                rowLabels[6].setText(String.valueOf(taken));
                int left = Integer.parseInt(rowLabels[7].getText()) - 1;
                rowLabels[7].setText(String.valueOf(left));
                Label acceptedLbl = new Label("Accepted");
                acceptedLbl.setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                actionBox.getChildren().setAll(acceptedLbl);
            });

            rejectBtn.setOnAction(ev -> {
                Label rejectedLbl = new Label("Rejected");
                rejectedLbl.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                actionBox.getChildren().setAll(rejectedLbl);
            });
        }

        VBox layout = new VBox(15, lblTitle, gp);
        layout.setPadding(new Insets(20));
        centerContent.getChildren().add(layout);
    }

    // ===== Utilities =====
    private void alert(Alert.AlertType type, String title, String msg) {
        Alert a = new Alert(type);
        a.setTitle(title);
        a.setHeaderText(null);
        a.setContentText(msg);
        a.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
